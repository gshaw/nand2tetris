// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // i = instruction[15];
    // a = instruction[12];
    // c = instruction[6..11];
    // d1 = instruction[3];
    // d2 = instruction[4];
    // d3 = instruction[5];
    // j = instruction[0..2];

    And(a = instruction[3], b = instruction[15], out = writeM); // i[3] = d3 & i[15] = i (Cinstruction)

    Not(in = instruction[15], out = Ainstruction);
    Mux16(a = outALU, b = instruction, out = inA, sel = Ainstruction);

    Or(a = Ainstruction, b = instruction[5], out = loadA); // i[5] = d1
    ARegister(in = inA, out = outA, out[0..14] = addressM, load = loadA);
    Mux16(a = outA, b = inM, out = IorM, sel = instruction[12]); // i[12] = a

    And(a = instruction[15], b = instruction[4], out = loadD); // Cinstruction & i[4] = d2
    DRegister(in = outALU, out = outD, load = loadD); // i[4] = d2
    ALU(
      x = outD,
      y = IorM,
      zx = instruction[11], // c6
      nx = instruction[10], // c5
      zy = instruction[9],  // c4
      ny = instruction[8],  // c3
      f  = instruction[7],  // c2
      no = instruction[6],  // c1
      out = outALU, out = outM,
      zr = eq,
      ng = lt
    );

    Not(in = lt, out = gte);
    Not(in = eq, out = neq);
    And(a = gte, b = neq, out = gt);
    Or(a = eq, b = lt, out = lte);
    Mux8Way(
      sel = instruction[0..2], // j1, j2, j3
      a = false,
      b = gt,
      c = eq,
      d = gte,
      e = lt,
      f = neq,
      g = lte,
      h = true,
      out = shouldJump
    );

    And(a = instruction[15], b = shouldJump, out = jump); // i[15] = i
    PC(in = outA, load = jump, inc = true, reset = reset, out[0..14] = pc);
}
